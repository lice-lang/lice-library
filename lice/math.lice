; (load "lice/math.lice")

; stubs

; constants

(-> PI 3.14159265358979323846)

(-> E  2.7182818284590452354)

; real functions

(def abs a (if (>= a 0) a (- 0 a)))

(def min a b (if (> a b) b a))

(def max a b (if (< a b) b a))

(def gcd a b
  (if (== b 0)
      a
      (gcd b (% a b))))

; (def )

; (def expt)

(def fib n (if
  (in? (list 1 2) n)
  1
  (+ (fib (- n 1)) (fib (- n 2)))))

(def factorial n (if
  (in? (list 0 1) n)
  1
  (* n (factorial (- n 1)))))

(def fast-mul a b m (|>
  (-> fast-mul-res 1)
  (while (!= 0 b) (|>
    (if (!= 0 (& b 1))
      (-> ret (% (+ a ret) m)))
    ; (println "b = " b)
    (-> b (/ b 2))
    (-> a (% (+ a a) m))))
  fast-mul-res))

; fast-exp returns a^b % m
; returning fast-exp-res,
; please escape the usage of this variable.
(def fast-exp a b m (|>
  (-> fast-exp-res 1)
  (while (!= 0 b) (|>
    (if (!= 0 (& b 1))
      (-> ret (fast-mul a ret m)))
    ; (println "b = " b)
    (-> b (/ b 2))
    (-> a (fast-mul a a m))))
  fast-exp-res))

(def square a (* a a))

(def cube a (* a a a))

(def odd? a (& a 1))

(def even? a (! (& a 1)))

(def zero? a (== 0 a))

; trigonometric functions

(def cos a (sin (- 1.570796326 a)))
(def csc a (/ 1 (sin a)))
(def sec a (/ 1 (cos a)))
(def tan a (/ (sin a) (cos a)))
(def cot a (/ (cos a) (sin a)))

(def tanh a (/ (sinh a) (cosh a)))
(def coth a (/ (cosh a) (sinh a)))
(def csch a (/ 1 (sinh a)))
(def sech a (/ 1 (cosh a)))


(def ->radians a (* (/ a 180) PI))
(def ->degrees a (/ (* a 180) PI))
